AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template to create an EC2 instance with key pair, security group, EBS volume, placement group, ASG, ELB, and CloudFront.

Parameters:
  MyAvailabilityZone1:
    Description: The first desired Availability Zone
    Type: AWS::EC2::AvailabilityZone::Name

  MyAvailabilityZone2:
    Description: The second desired Availability Zone
    Type: AWS::EC2::AvailabilityZone::Name

  KeyName:
    Description: Name of an existing EC2 Key Pair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 Key Pair.

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16

  MySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Ref MyAvailabilityZone1

  MySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Ref MyAvailabilityZone2

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  MyVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  MyRoute:
    Type: AWS::EC2::Route
    DependsOn: MyVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the EC2 instance
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp

  EBSVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Ref MyAvailabilityZone1
      Size: 8
      VolumeType: gp2

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-053b0d53c279acc90  # Replace with your desired image ID
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Your user data script goes here
          sudo wget https://github.com/thetechguy44/Linux-commands/raw/main/example-setup/pull.sh 
          sudo chmod +x pull.sh
          sudo ./pull.sh

  MyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: MyAutoScalingGroup
      AvailabilityZones:
        - !Ref MyAvailabilityZone1
        - !Ref MyAvailabilityZone2
      LaunchConfigurationName: MyLaunchConfiguration
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref MyTargetGroup

  MyLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-053b0d53c279acc90  # Replace with your desired image ID
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Your user data script goes here
          sudo wget https://github.com/thetechguy44/Linux-commands/raw/main/example-setup/pull.sh 
          sudo chmod +x pull.sh
          sudo ./pull.sh

  MyELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyLoadBalancer
      Subnets:
        - !Ref MySubnet1
        - !Ref MySubnet2
      SecurityGroups:
        - !Ref SecurityGroup

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyELB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup

  MyCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt MyELB.DNSName
            Id: MyOrigin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          TargetOriginId: MyOrigin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

Outputs:
  InstanceId:
    Description: The ID of the created EC2 instance
    Value: !Ref EC2Instance
